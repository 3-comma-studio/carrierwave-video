= CarrierWave Video Converter

{<img src="https://secure.travis-ci.org/rheaton/carrierwave-video.png?branch=master" alt="Build Status" />}[http://travis-ci.org/rheaton/carrierwave-video]

This gem adds a video converter using ffmpeg and the streamio-ffmpeg rubygem.
Note: for watermarking to work, there a fork of the streamio-ffmpeg gem that must be used.

= Installation

    gem install carrierwave-video

Using bundler:

    gem 'carrierwave-video'

= Usage

    class VideoUploader < CarrierWave::Uploader::Base
      include CarrierWave::VideoConverter

      process encode_video: [:mp4, after_transcode: :set_success ]
    end

    class Video
      mount_uploader :file, VideoUploader

      def set_success(format, opts)
        self.success = true
      end
    end

= Possible Options

Pass in options to process:

    process encode_video: [:mp4, resolution: "200x200"]

Resolution passed to ffmpeg:
    resolution: "640x360"

Watermark:
    watermark: {
      path: File.join(Rails.root, "directory", "file.png"),
      position: :bottom_right, # also: :top_right, :bottom_left, :bottom_right
      pixels_from_edge: 10
    }

Callbacks:
These are methods defined on the model. They will be run as part of the transcoding process.
Useful for notating failure and completion.
They will be called with the parameters sent to process.

    callbacks: {
      before_transcode: :method
      after_transcode: :method
      rescue: :method
      ensure: :method
    }

Logging:
    logger: :method  #returns object that behaves like Logger

= Upcoming

* screengrabs
* ffmpeg gives a confusing error if watermark file does not exist, raise in ruby
